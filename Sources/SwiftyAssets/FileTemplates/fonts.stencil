/*
    SwiftyFonts.swift
    {{ projectName }}
    
    Generated by SwiftyAssets ðŸ¦Š on {{ date }}
    Copyright Â© 2020, {{ projectName }}. All rights reserved.
*/

import Foundation

// swiftlint:disable force_unwrapping nesting
protocol SwiftyAssetsFontProtocol where Self: RawRepresentable, Self.RawValue == String {
    
}

extension SwiftyAssetsFontProtocol {
    var postScriptName: String {
        return self.rawValue
    }
}

extension SwiftyAssets {
    class Font {
        {% filter removeExtraNewLines %}
        {% for family in fontFamilies %}
        enum {{ family.name }}: String, SwiftyAssetsFontProtocol {
            {% for font in family.fonts %}
            case {{ font.style }} = "{{ font.postScriptName }}"
            {% endfor %}
        }
        {% ifnot forloop.last %}
        {% removeExtraNewLinesForceNewLine %}
        {% endif %}
        {% endfor %}
        {% endfilter %}
    }
}

#if canImport(UIKit)
import UIKit

extension SwiftyAssetsFontProtocol {
    func font(withSize size: CGFloat) -> UIFont {
        return UIFont(name: self.postScriptName, size: size)!
    }
}
#endif

#if canImport(SwiftUI)
import SwiftUI

extension SwiftyAssetsFontProtocol {
    func font(withSize size: CGFloat) -> Font {
        return Font.custom(self.postScriptName, size: size)
    }

    func font(withSize size: CGFloat, relativeTo style: Font.TextStyle) -> Font {
        return Font.custom(self.postScriptName, size: size, relativeTo: style)
    }
}
#endif
// swiftlint:enable force_unwrapping nesting
